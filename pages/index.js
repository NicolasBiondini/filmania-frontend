import { useEffect, useState } from "react";

import Head from "next/head";
import Image from "next/image";

import {
  ApolloClient,
  InMemoryCache,
  ApolloProvider,
  useQuery,
  gql,
} from "@apollo/client";

import styles from "../styles/Home.module.css";

import Layout from "../components/Layout";
import ArticleCards from "../components/ArticleCards";
import Header from "../components/Header";
import Footer from "../components/Footer";

export default function Home({ data }) {
  const [finalData, setFinalData] = useState([]);

  useEffect(() => {
    let realArr = [];
    for (let i = 0; i < 3; i++) {
      let prevArr = [];
      for (let x = 0; x < 11 - 1; x += 3) {
        if (data[x + i] !== undefined) {
          prevArr.push(data[x + i]);
        }
      }
      realArr.push(prevArr);
    }
    if (realArr[2].length <= realArr[1].length) {
      let removeAndAdd = realArr[1].pop();
      realArr[2].push(removeAndAdd);
    }
    //finalData[2].push(reversed[9 - 1]);
    setFinalData(realArr);
  }, []);

  console.log(finalData);

  return (
    <Layout>
      <div className={styles.container}>
        <main className={styles.main}>
          <Header />
          <div className={styles.contentContainer}>
            {finalData.map((columns, columnIndex) => {
              return (
                <div
                  key={`column-${columnIndex}`}
                  className={styles.columnsContainer}
                >
                  {columns.map((post, index) => {
                    return (
                      <ArticleCards
                        key={post.id}
                        title={post.attributes.title}
                        date={post.attributes.date}
                        shortDescription={post.attributes.shortDescription}
                        category={
                          post.attributes.categories.data[0].attributes.name
                        }
                        slug={post.attributes.slug}
                        image={
                          (columnIndex === 0 || columnIndex === 2) &&
                          index === 0
                            ? null
                            : post.attributes.image.data.attributes.formats
                                .medium
                        }
                        index={index}
                      />
                    );
                  })}
                </div>
              );
            })}
          </div>
        </main>

        <Footer />
      </div>
    </Layout>
  );
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: "http://localhost:1337/graphql",
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query indexPosts {
        posts(sort: ["id:desc"], pagination: { limit: 11 }) {
          data {
            id
            attributes {
              title
              slug
              date
              shortDescription
              categories {
                data {
                  attributes {
                    name
                  }
                }
              }
              writers {
                data {
                  attributes {
                    name
                  }
                }
              }
              image {
                data {
                  attributes {
                    formats
                  }
                }
              }
            }
          }
        }
      }
    `,
  });

  const reversed = data.posts.data.slice(0).reverse();

  return {
    props: {
      data: data.posts.data,
    },
  };
}

/**
            .slice(0)
            .reverse()

    <div className={styles.container}>
      <Head>
        <title>Filmania</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Header />
        <div className={styles.contentContainer}>
          {data
            .slice(0)
            .reverse()
            .map((post, index) => {
              return (
                <ArticleCards
                  key={post.id}
                  title={post.attributes.title}
                  date={post.attributes.date}
                  shortDescription={post.attributes.shortDescription}
                  category={post.attributes.categories.data[0].attributes.name}
                  slug={post.attributes.slug}
                  image={
                    index === 0 || index === 2
                      ? null
                      : post.attributes.image.data.attributes.formats.medium
                  }
                  index={index}
                />
              );
            })}
          <div className={styles.newsletterContainer}>
            <h1>Latest podast: </h1>
          </div>
        </div>
      </main>

      <Footer />
    </div>


    {data
            .slice(0)
            .reverse()
            .map((post, index) => {
              return (
                <ArticleCards
                  key={post.id}
                  title={post.attributes.title}
                  date={post.attributes.date}
                  shortDescription={post.attributes.shortDescription}
                  category={post.attributes.categories.data[0].attributes.name}
                  slug={post.attributes.slug}
                  image={
                    index === 0 || index === 2
                      ? null
                      : post.attributes.image.data.attributes.formats.medium
                  }
                  index={index}
                />
              );
            })}

 */
